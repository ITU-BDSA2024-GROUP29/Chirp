name: .NET Release

on:
  push:
    branches: [$default-branch]
  pull_request:
    branches: [$default-branch]
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build Chirp.sln --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Zip Build Output
        run: |
          mkdir -p output
          if [ $RUNNER_OS = 'Linux' ] || [ $RUNNER_OS = 'macOS' ]; then
            zip -r output/build-${RUNNER_OS}.zip bin/Debug/net8.0
          elif [ $RUNNER_OS = 'Windows' ]; then
            powershell -Command "Compress-Archive -Path bin/Debug/net8.0 -DestinationPath output/build-${RUNNER_OS}.zip"
          fi
        shell: bash

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ github.run_number }}',
              name: `Release v${{ github.run_number }}`,
              draft: false,
              prerelease: false
            });
            return release.data.upload_url;

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/build-${RUNNER_OS}.zip
          asset_name: build-${RUNNER_OS}.zip
          asset_content_type: application/zip
